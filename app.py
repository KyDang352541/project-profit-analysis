import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="üîç Ph√¢n T√≠ch L·ª£i Nhu·∫≠n D·ª± √Ån", layout="wide")

st.title("üìä ·ª®ng D·ª•ng Ph√¢n T√≠ch L·ª£i Nhu·∫≠n D·ª± √Ån")

st.markdown("### üìù Nh·∫≠p d·ªØ li·ªáu d·ª± to√°n (Input 1)")
input1_data = st.data_editor(
    pd.DataFrame({
        "H·∫°ng m·ª•c": ["Gi·ªù c√¥ng c√¥ng nh√¢n", "Gi·ªù c√¥ng vƒÉn ph√≤ng", "Robot", "CNC1", "CNC2", "Autoclave", "V·∫≠t li·ªáu"],
        "Gi√° tr·ªã": [0]*7
    }),
    num_rows="fixed",
    key="input1"
)

st.markdown("### üìù Nh·∫≠p d·ªØ li·ªáu th·ª±c t·∫ø (Input 2)")
input2_data = st.data_editor(
    pd.DataFrame({
        "H·∫°ng m·ª•c": ["Gi·ªù c√¥ng c√¥ng nh√¢n", "Gi·ªù c√¥ng vƒÉn ph√≤ng", "Robot", "CNC1", "CNC2", "Autoclave", "V·∫≠t li·ªáu"],
        "Gi√° tr·ªã": [0]*7
    }),
    num_rows="fixed",
    key="input2"
)

st.markdown("### üìù Nh·∫≠p chi ph√≠ b·∫£o h√†nh / hao m√≤n (Input 3 - tu·ª≥ ch·ªçn)")
input3_data = st.data_editor(
    pd.DataFrame({
        "Lo·∫°i chi ph√≠": ["B·∫£o h√†nh", "Hao m√≤n"],
        "Gi√° tr·ªã": [0, 0]
    }),
    num_rows="fixed",
    key="input3"
)

st.markdown("### üíπ Nh·∫≠p bi√™n ƒë·ªô l·ª£i nhu·∫≠n k·∫ø ho·∫°ch (Input 4)")
margin = st.slider("Bi√™n ƒë·ªô l·ª£i nhu·∫≠n k·∫ø ho·∫°ch (%)", min_value=0.0, max_value=100.0, value=20.0) / 100

# === So s√°nh d·ªØ li·ªáu ===
st.divider()
st.header("üìâ So s√°nh chi ph√≠ d·ª± to√°n v√† th·ª±c t·∫ø")

def summarize(df):
    return df.set_index("H·∫°ng m·ª•c")["Gi√° tr·ªã"]

cost_plan = summarize(input1_data)
cost_actual = summarize(input2_data)
comparison = pd.DataFrame({
    "D·ª± to√°n": cost_plan,
    "Th·ª±c t·∫ø": cost_actual,
    "Ch√™nh l·ªách": cost_actual - cost_plan
})

st.dataframe(comparison, use_container_width=True)

# === Bi·ªÉu ƒë·ªì ===
fig = px.bar(
    comparison.reset_index(),
    x="H·∫°ng m·ª•c",
    y=["D·ª± to√°n", "Th·ª±c t·∫ø"],
    barmode="group",
    title="So s√°nh chi ph√≠ t·ª´ng h·∫°ng m·ª•c",
    color_discrete_sequence=["#1f77b4", "#ff7f0e"]
)
st.plotly_chart(fig, use_container_width=True)

# === T·ªïng h·ª£p chi ph√≠ v√† l·ª£i nhu·∫≠n ===
total_plan = cost_plan.sum()
total_actual = cost_actual.sum() + input3_data["Gi√° tr·ªã"].sum()
expected_profit = total_plan * margin
actual_profit = total_plan - total_actual
profit_diff = actual_profit - expected_profit

st.subheader("üìå T√≥m t·∫Øt l·ª£i nhu·∫≠n")

col1, col2, col3 = st.columns(3)
col1.metric("T·ªïng chi ph√≠ k·∫ø ho·∫°ch", f"{total_plan:,.0f}")
col2.metric("T·ªïng chi ph√≠ th·ª±c t·∫ø", f"{total_actual:,.0f}")
col3.metric("Chi ph√≠ ph√°t sinh (B·∫£o h√†nh / hao m√≤n)", f"{input3_data['Gi√° tr·ªã'].sum():,.0f}")

col4, col5, col6 = st.columns(3)
col4.metric("Bi√™n l·ª£i nhu·∫≠n k·∫ø ho·∫°ch", f"{margin*100:.1f}%")
col5.metric("L·ª£i nhu·∫≠n th·ª±c t·∫ø", f"{actual_profit:,.0f}")
col6.metric("L·ªách so v·ªõi k·∫ø ho·∫°ch", f"{profit_diff:,.0f}", delta_color="inverse")
