import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="üìä Ph√¢n T√≠ch L·ª£i Nhu·∫≠n D·ª± √Ån", layout="wide")
st.title("üìä ·ª®ng D·ª•ng Ph√¢n T√≠ch L·ª£i Nhu·∫≠n D·ª± √Ån")

# === T·ª∂ GI√Å V√Ä ƒê∆†N GI√Å THEO GI·ªú ===
st.markdown("### üí≤ C√†i ƒë·∫∑t ƒë∆°n gi√° v√† t·ª∑ gi√°")
col1, col2, col3, col4 = st.columns(4)
rate_worker = col1.number_input("üíº ƒê∆°n gi√° gi·ªù c√¥ng c√¥ng nh√¢n (VND)", value=50000.0, step=1000.0, format="%.2f")
rate_office = col2.number_input("üßë‚Äçüíª ƒê∆°n gi√° gi·ªù c√¥ng vƒÉn ph√≤ng (VND)", value=60000.0, step=1000.0, format="%.2f")
rate_machine = col3.number_input("ü§ñ ƒê∆°n gi√° gi·ªù m√°y m√≥c (Robot/CNC/Autoclave) (VND)", value=150000.0, step=1000.0, format="%.2f")
exchange_rate = col4.number_input("üí± T·ª∑ gi√° VND/USD", value=24000.0, step=100.0, format="%.2f")

# === NH·∫¨P D·ªÆ LI·ªÜU D·ª∞ TO√ÅN ===
st.markdown("### üìã Nh·∫≠p d·ªØ li·ªáu d·ª± to√°n (Input 1)")
input1 = st.data_editor(
    pd.DataFrame({
        "H·∫°ng m·ª•c": ["Gi·ªù c√¥ng c√¥ng nh√¢n", "Gi·ªù c√¥ng vƒÉn ph√≤ng", "Robot", "CNC1", "CNC2", "Autoclave", "V·∫≠t li·ªáu"],
        "S·ªë gi·ªù / Gi√° tr·ªã": [0.0]*7
    }),
    num_rows="fixed",
    key="input1"
)

# === NH·∫¨P D·ªÆ LI·ªÜU TH·ª∞C T·∫æ ===
st.markdown("### üìã Nh·∫≠p d·ªØ li·ªáu th·ª±c t·∫ø (Input 2)")
input2 = st.data_editor(
    pd.DataFrame({
        "H·∫°ng m·ª•c": ["Gi·ªù c√¥ng c√¥ng nh√¢n", "Gi·ªù c√¥ng vƒÉn ph√≤ng", "Robot", "CNC1", "CNC2", "Autoclave", "V·∫≠t li·ªáu"],
        "S·ªë gi·ªù / Gi√° tr·ªã": [0.0]*7
    }),
    num_rows="fixed",
    key="input2"
)

# === CHI PH√ç PH√ÅT SINH ===
st.markdown("### ‚öôÔ∏è Chi ph√≠ b·∫£o h√†nh / hao m√≤n (Input 3 - t√πy ch·ªçn)")
input3 = st.data_editor(
    pd.DataFrame({
        "Lo·∫°i chi ph√≠": ["B·∫£o h√†nh", "Hao m√≤n"],
        "Gi√° tr·ªã (VND)": [0.0, 0.0]
    }),
    num_rows="fixed",
    key="input3"
)

# === BI√äN L·ª¢I NHU·∫¨N ===
st.markdown("### üíπ Nh·∫≠p bi√™n ƒë·ªô l·ª£i nhu·∫≠n k·∫ø ho·∫°ch (Input 4)")
margin = st.slider("Bi√™n ƒë·ªô l·ª£i nhu·∫≠n k·∫ø ho·∫°ch (%)", min_value=0.0, max_value=100.0, value=20.0) / 100

st.divider()
st.header("üìâ So s√°nh chi ph√≠ d·ª± to√°n v√† th·ª±c t·∫ø")

# === H√ÄM T√çNH TO√ÅN CHI PH√ç THEO GI√Å GI·ªú ===
def calculate_cost(df, rate_worker, rate_office, rate_machine):
    df = df.copy()
    df["Gi√° tr·ªã (VND)"] = 0.0
    for i, row in df.iterrows():
        category = row["H·∫°ng m·ª•c"]
        hours = row["S·ªë gi·ªù / Gi√° tr·ªã"]
        if "c√¥ng nh√¢n" in category:
            df.at[i, "Gi√° tr·ªã (VND)"] = hours * rate_worker
        elif "vƒÉn ph√≤ng" in category:
            df.at[i, "Gi√° tr·ªã (VND)"] = hours * rate_office
        elif category in ["Robot", "CNC1", "CNC2", "Autoclave"]:
            df.at[i, "Gi√° tr·ªã (VND)"] = hours * rate_machine
        elif category == "V·∫≠t li·ªáu":
            df.at[i, "Gi√° tr·ªã (VND)"] = hours  # V·∫≠t li·ªáu ƒë√£ l√† gi√° tr·ªã
    df["Gi√° tr·ªã (USD)"] = df["Gi√° tr·ªã (VND)"] / exchange_rate
    return df.set_index("H·∫°ng m·ª•c")

# === T√çNH TO√ÅN ===
plan_df = calculate_cost(input1, rate_worker, rate_office, rate_machine)
actual_df = calculate_cost(input2, rate_worker, rate_office, rate_machine)

# === B·∫¢NG SO S√ÅNH ===
comparison = pd.DataFrame({
    "D·ª± to√°n (VND)": plan_df["Gi√° tr·ªã (VND)"],
    "Th·ª±c t·∫ø (VND)": actual_df["Gi√° tr·ªã (VND)"],
    "Ch√™nh l·ªách (VND)": actual_df["Gi√° tr·ªã (VND)"] - plan_df["Gi√° tr·ªã (VND)"],
    "D·ª± to√°n (USD)": plan_df["Gi√° tr·ªã (USD)"],
    "Th·ª±c t·∫ø (USD)": actual_df["Gi√° tr·ªã (USD)"],
})

st.dataframe(comparison, use_container_width=True)

# === BI·ªÇU ƒê·ªí ===
fig = px.bar(
    comparison.reset_index(),
    x="H·∫°ng m·ª•c",
    y=["D·ª± to√°n (VND)", "Th·ª±c t·∫ø (VND)"],
    barmode="group",
    title="So s√°nh chi ph√≠ t·ª´ng h·∫°ng m·ª•c (VND)",
    color_discrete_sequence=["#1f77b4", "#ff7f0e"]
)
st.plotly_chart(fig, use_container_width=True)

# === T·ªîNG H·ª¢P L·ª¢I NHU·∫¨N ===
plan_total = plan_df["Gi√° tr·ªã (VND)"].sum()
actual_total = actual_df["Gi√° tr·ªã (VND)"].sum() + input3["Gi√° tr·ªã (VND)"].sum()
expected_profit = plan_total * margin
actual_profit = plan_total - actual_total
profit_diff = actual_profit - expected_profit

st.subheader("üìå T√≥m t·∫Øt l·ª£i nhu·∫≠n")

col1, col2, col3 = st.columns(3)
col1.metric("Chi ph√≠ d·ª± to√°n (VND)", f"{plan_total:,.0f}")
col2.metric("Chi ph√≠ th·ª±c t·∫ø (VND)", f"{actual_total:,.0f}")
col3.metric("Chi ph√≠ ph√°t sinh", f"{input3['Gi√° tr·ªã (VND)'].sum():,.0f}")

col4, col5, col6 = st.columns(3)
col4.metric("Bi√™n ƒë·ªô k·∫ø ho·∫°ch", f"{margin*100:.1f}%")
col5.metric("L·ª£i nhu·∫≠n th·ª±c t·∫ø (VND)", f"{actual_profit:,.0f}")
col6.metric("L·ªách so v·ªõi k·∫ø ho·∫°ch", f"{profit_diff:,.0f}", delta_color="inverse")

col7, col8 = st.columns(2)
col7.metric("Chi ph√≠ th·ª±c t·∫ø (USD)", f"{actual_total / exchange_rate:,.2f}")
col8.metric("L·ª£i nhu·∫≠n th·ª±c t·∫ø (USD)", f"{actual_profit / exchange_rate:,.2f}")
